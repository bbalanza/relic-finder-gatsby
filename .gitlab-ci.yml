image: node:16-alpine

# include:
#   - template: Secret-Detection.gitlab-ci.yml
#   - template: Security/SAST.gitlab-ci.yml

stages:
  - install
  - unit-testing
  - e2e-testing
  - build
  - deploy

workflow:
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      variables:
        _ENV: production
        _FIREBASE_DEPLOYMENT: deploy --only hosting
    - if: $CI_COMMIT_BRANCH == "staging"
      variables:
        _ENV: staging
        _FIREBASE_DEPLOYMENT: hosting:channel:deploy $CI_ENVIRONMENT_NAME

.install_cache: 
  cache: &install_cache
    key: ${CI_COMMIT_REF_SLUG}-install
    paths:
      - .yarn/
      - node_modules/
    policy: pull

.build_cache: 
  cache: &build_cache
    key: ${CI_COMMIT_REF_SLUG}-build
    paths:
      - public/
      - .cache/
    policy: pull

.firebase_tools_cache:
  cache: &firebase_tools_cache
    key: ${CI_COMMIT_REF_SLUG}-build
    paths:
      - node_modules/
    policy: pull-push

install:
  stage: install
  environment: $_ENV
  script:
    - echo 'Installing dependencies:'
    - yarn set version berry
    - yarn install
  cache:
    - <<: *install_cache
      policy: pull-push
  rules:
    - if: $STRAPI_UPDATE != "true"

unit-testing:
  stage: unit-testing
  environment: $_ENV
  script:
    - echo "Starting Unit Tests"
    - yarn test
  cache:
    - <<: *install_cache
  rules:
    - if: $STRAPI_UPDATE != "true"

e2e-testing:
  stage: e2e-testing
  environment: $_ENV
  script:
    - echo "Starting e2e Tests"
    - yarn e2e
  cache:
    - <<: *install_cache
  rules:
    - if: $_ENV == 'production' && $STRAPI_UPDATE != "true"

build:
  stage: build
  environment:
    name: $_ENV
  script:
    - yarn build
  cache:
    - <<: *build_cache 
      policy: pull-push
    - <<: *install_cache     

deploy:
  stage: deploy
  environment:
    name: $_ENV
  before_script:
    - npm i firebase-tools
  cache:
    - <<: *build_cache
    - <<: *firebase_tools_cache
  script:
    - echo "Deploying to Firebase in $CI_ENVIRONMENT_NAME"
    - firebase $_FIREBASE_DEPLOYMENT --token $FIREBASE_TOKEN
